(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  });
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __reExport = (target, module, copyDefault, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
          __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
    }
    return target;
  };
  var __toESM = (module, isNodeMode) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", !isNodeMode && module && module.__esModule ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
  };

  // (disabled):crypto
  var require_crypto = __commonJS({
    "(disabled):crypto"() {
    }
  });

  // node_modules/crypto-js/core.js
  var require_core = __commonJS({
    "node_modules/crypto-js/core.js"(exports, module) {
      (function(root, factory) {
        if (typeof exports === "object") {
          module.exports = exports = factory();
        } else if (typeof define === "function" && define.amd) {
          define([], factory);
        } else {
          root.CryptoJS = factory();
        }
      })(exports, function() {
        var CryptoJS = CryptoJS || function(Math2, undefined) {
          var crypto;
          if (typeof window !== "undefined" && window.crypto) {
            crypto = window.crypto;
          }
          if (typeof self !== "undefined" && self.crypto) {
            crypto = self.crypto;
          }
          if (typeof globalThis !== "undefined" && globalThis.crypto) {
            crypto = globalThis.crypto;
          }
          if (!crypto && typeof window !== "undefined" && window.msCrypto) {
            crypto = window.msCrypto;
          }
          if (!crypto && typeof global !== "undefined" && global.crypto) {
            crypto = global.crypto;
          }
          if (!crypto && typeof __require === "function") {
            try {
              crypto = require_crypto();
            } catch (err) {
            }
          }
          var cryptoSecureRandomInt = function() {
            if (crypto) {
              if (typeof crypto.getRandomValues === "function") {
                try {
                  return crypto.getRandomValues(new Uint32Array(1))[0];
                } catch (err) {
                }
              }
              if (typeof crypto.randomBytes === "function") {
                try {
                  return crypto.randomBytes(4).readInt32LE();
                } catch (err) {
                }
              }
            }
            throw new Error("Native crypto module could not be used to get secure random number.");
          };
          var create = Object.create || function() {
            function F() {
            }
            return function(obj) {
              var subtype;
              F.prototype = obj;
              subtype = new F();
              F.prototype = null;
              return subtype;
            };
          }();
          var C = {};
          var C_lib = C.lib = {};
          var Base = C_lib.Base = function() {
            return {
              extend: function(overrides) {
                var subtype = create(this);
                if (overrides) {
                  subtype.mixIn(overrides);
                }
                if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                  subtype.init = function() {
                    subtype.$super.init.apply(this, arguments);
                  };
                }
                subtype.init.prototype = subtype;
                subtype.$super = this;
                return subtype;
              },
              create: function() {
                var instance = this.extend();
                instance.init.apply(instance, arguments);
                return instance;
              },
              init: function() {
              },
              mixIn: function(properties) {
                for (var propertyName in properties) {
                  if (properties.hasOwnProperty(propertyName)) {
                    this[propertyName] = properties[propertyName];
                  }
                }
                if (properties.hasOwnProperty("toString")) {
                  this.toString = properties.toString;
                }
              },
              clone: function() {
                return this.init.prototype.extend(this);
              }
            };
          }();
          var WordArray = C_lib.WordArray = Base.extend({
            init: function(words, sigBytes) {
              words = this.words = words || [];
              if (sigBytes != undefined) {
                this.sigBytes = sigBytes;
              } else {
                this.sigBytes = words.length * 4;
              }
            },
            toString: function(encoder) {
              return (encoder || Hex).stringify(this);
            },
            concat: function(wordArray) {
              var thisWords = this.words;
              var thatWords = wordArray.words;
              var thisSigBytes = this.sigBytes;
              var thatSigBytes = wordArray.sigBytes;
              this.clamp();
              if (thisSigBytes % 4) {
                for (var i = 0; i < thatSigBytes; i++) {
                  var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                  thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
                }
              } else {
                for (var j = 0; j < thatSigBytes; j += 4) {
                  thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
                }
              }
              this.sigBytes += thatSigBytes;
              return this;
            },
            clamp: function() {
              var words = this.words;
              var sigBytes = this.sigBytes;
              words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
              words.length = Math2.ceil(sigBytes / 4);
            },
            clone: function() {
              var clone = Base.clone.call(this);
              clone.words = this.words.slice(0);
              return clone;
            },
            random: function(nBytes) {
              var words = [];
              for (var i = 0; i < nBytes; i += 4) {
                words.push(cryptoSecureRandomInt());
              }
              return new WordArray.init(words, nBytes);
            }
          });
          var C_enc = C.enc = {};
          var Hex = C_enc.Hex = {
            stringify: function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var hexChars = [];
              for (var i = 0; i < sigBytes; i++) {
                var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                hexChars.push((bite >>> 4).toString(16));
                hexChars.push((bite & 15).toString(16));
              }
              return hexChars.join("");
            },
            parse: function(hexStr) {
              var hexStrLength = hexStr.length;
              var words = [];
              for (var i = 0; i < hexStrLength; i += 2) {
                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
              }
              return new WordArray.init(words, hexStrLength / 2);
            }
          };
          var Latin1 = C_enc.Latin1 = {
            stringify: function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var latin1Chars = [];
              for (var i = 0; i < sigBytes; i++) {
                var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                latin1Chars.push(String.fromCharCode(bite));
              }
              return latin1Chars.join("");
            },
            parse: function(latin1Str) {
              var latin1StrLength = latin1Str.length;
              var words = [];
              for (var i = 0; i < latin1StrLength; i++) {
                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
              }
              return new WordArray.init(words, latin1StrLength);
            }
          };
          var Utf8 = C_enc.Utf8 = {
            stringify: function(wordArray) {
              try {
                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
              } catch (e) {
                throw new Error("Malformed UTF-8 data");
              }
            },
            parse: function(utf8Str) {
              return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
            }
          };
          var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
            reset: function() {
              this._data = new WordArray.init();
              this._nDataBytes = 0;
            },
            _append: function(data) {
              if (typeof data == "string") {
                data = Utf8.parse(data);
              }
              this._data.concat(data);
              this._nDataBytes += data.sigBytes;
            },
            _process: function(doFlush) {
              var processedWords;
              var data = this._data;
              var dataWords = data.words;
              var dataSigBytes = data.sigBytes;
              var blockSize = this.blockSize;
              var blockSizeBytes = blockSize * 4;
              var nBlocksReady = dataSigBytes / blockSizeBytes;
              if (doFlush) {
                nBlocksReady = Math2.ceil(nBlocksReady);
              } else {
                nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
              }
              var nWordsReady = nBlocksReady * blockSize;
              var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
              if (nWordsReady) {
                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                  this._doProcessBlock(dataWords, offset);
                }
                processedWords = dataWords.splice(0, nWordsReady);
                data.sigBytes -= nBytesReady;
              }
              return new WordArray.init(processedWords, nBytesReady);
            },
            clone: function() {
              var clone = Base.clone.call(this);
              clone._data = this._data.clone();
              return clone;
            },
            _minBufferSize: 0
          });
          var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
            cfg: Base.extend(),
            init: function(cfg) {
              this.cfg = this.cfg.extend(cfg);
              this.reset();
            },
            reset: function() {
              BufferedBlockAlgorithm.reset.call(this);
              this._doReset();
            },
            update: function(messageUpdate) {
              this._append(messageUpdate);
              this._process();
              return this;
            },
            finalize: function(messageUpdate) {
              if (messageUpdate) {
                this._append(messageUpdate);
              }
              var hash = this._doFinalize();
              return hash;
            },
            blockSize: 512 / 32,
            _createHelper: function(hasher) {
              return function(message, cfg) {
                return new hasher.init(cfg).finalize(message);
              };
            },
            _createHmacHelper: function(hasher) {
              return function(message, key) {
                return new C_algo.HMAC.init(hasher, key).finalize(message);
              };
            }
          });
          var C_algo = C.algo = {};
          return C;
        }(Math);
        return CryptoJS;
      });
    }
  });

  // node_modules/crypto-js/sha256.js
  var require_sha256 = __commonJS({
    "node_modules/crypto-js/sha256.js"(exports, module) {
      (function(root, factory) {
        if (typeof exports === "object") {
          module.exports = exports = factory(require_core());
        } else if (typeof define === "function" && define.amd) {
          define(["./core"], factory);
        } else {
          factory(root.CryptoJS);
        }
      })(exports, function(CryptoJS) {
        (function(Math2) {
          var C = CryptoJS;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C.algo;
          var H = [];
          var K = [];
          (function() {
            function isPrime(n2) {
              var sqrtN = Math2.sqrt(n2);
              for (var factor = 2; factor <= sqrtN; factor++) {
                if (!(n2 % factor)) {
                  return false;
                }
              }
              return true;
            }
            function getFractionalBits(n2) {
              return (n2 - (n2 | 0)) * 4294967296 | 0;
            }
            var n = 2;
            var nPrime = 0;
            while (nPrime < 64) {
              if (isPrime(n)) {
                if (nPrime < 8) {
                  H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
                }
                K[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
                nPrime++;
              }
              n++;
            }
          })();
          var W = [];
          var SHA256 = C_algo.SHA256 = Hasher.extend({
            _doReset: function() {
              this._hash = new WordArray.init(H.slice(0));
            },
            _doProcessBlock: function(M, offset) {
              var H2 = this._hash.words;
              var a = H2[0];
              var b = H2[1];
              var c = H2[2];
              var d = H2[3];
              var e = H2[4];
              var f = H2[5];
              var g = H2[6];
              var h = H2[7];
              for (var i = 0; i < 64; i++) {
                if (i < 16) {
                  W[i] = M[offset + i] | 0;
                } else {
                  var gamma0x = W[i - 15];
                  var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                  var gamma1x = W[i - 2];
                  var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                  W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
                }
                var ch = e & f ^ ~e & g;
                var maj = a & b ^ a & c ^ b & c;
                var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
                var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
                var t1 = h + sigma1 + ch + K[i] + W[i];
                var t2 = sigma0 + maj;
                h = g;
                g = f;
                f = e;
                e = d + t1 | 0;
                d = c;
                c = b;
                b = a;
                a = t1 + t2 | 0;
              }
              H2[0] = H2[0] + a | 0;
              H2[1] = H2[1] + b | 0;
              H2[2] = H2[2] + c | 0;
              H2[3] = H2[3] + d | 0;
              H2[4] = H2[4] + e | 0;
              H2[5] = H2[5] + f | 0;
              H2[6] = H2[6] + g | 0;
              H2[7] = H2[7] + h | 0;
            },
            _doFinalize: function() {
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
              data.sigBytes = dataWords.length * 4;
              this._process();
              return this._hash;
            },
            clone: function() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            }
          });
          C.SHA256 = Hasher._createHelper(SHA256);
          C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
        })(Math);
        return CryptoJS.SHA256;
      });
    }
  });

  // node_modules/random-word-slugs/dist/words.js
  var require_words = __commonJS({
    "node_modules/random-word-slugs/dist/words.js"(exports) {
      "use strict";
      var __values = exports && exports.__values || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getWordsByCategory = exports.wordList = void 0;
      exports.wordList = {
        noun: [
          { word: "accountant", categories: ["profession"] },
          { word: "ability", categories: ["thing"] },
          { word: "accident", categories: ["thing"] },
          { word: "account", categories: ["thing"] },
          { word: "action", categories: ["thing"] },
          { word: "activity", categories: ["thing"] },
          { word: "actor", categories: ["profession"] },
          { word: "ad", categories: ["media"] },
          { word: "addition", categories: ["thing"] },
          { word: "address", categories: ["thing"] },
          { word: "adult", categories: ["people"] },
          { word: "advantage", categories: ["thing"] },
          { word: "advertisement", categories: ["media"] },
          { word: "afternoon", categories: ["time"] },
          { word: "agency", categories: ["thing"] },
          { word: "agent", categories: ["people"] },
          { word: "air", categories: ["thing"] },
          { word: "airline", categories: ["transportation"] },
          { word: "airplane", categories: ["transportation"] },
          { word: "airport", categories: ["transportation", "place"] },
          { word: "alarm", categories: ["thing"] },
          { word: "alligator", categories: ["animals"] },
          { word: "ambulance", categories: ["health"] },
          { word: "analyst", categories: ["profession"] },
          { word: "angle", categories: ["thing"] },
          { word: "animal", categories: ["animals"] },
          { word: "answer", categories: ["thing"] },
          { word: "apartment", categories: ["place"] },
          { word: "apple", categories: ["food"] },
          { word: "application", categories: ["thing"] },
          { word: "appointment", categories: ["thing"] },
          { word: "architect", categories: ["profession"] },
          { word: "argument", categories: ["thing"] },
          { word: "area", categories: ["thing"] },
          { word: "arm", categories: ["thing"] },
          { word: "army", categories: ["thing"] },
          { word: "art", categories: ["thing"] },
          { word: "article", categories: ["thing"] },
          { word: "artist", categories: ["profession"] },
          { word: "australia", categories: ["place"] },
          { word: "author", categories: ["profession"] },
          { word: "autumn", categories: ["time"] },
          { word: "baby", categories: ["people", "family"] },
          { word: "baker", categories: ["profession"] },
          { word: "balloon", categories: ["thing"] },
          { word: "banana", categories: ["food"] },
          { word: "barista", categories: ["profession"] },
          { word: "battery", categories: ["thing"] },
          { word: "beach", categories: ["place"] },
          { word: "bear", categories: ["animals"] },
          { word: "beard", categories: ["thing"] },
          { word: "bed", categories: ["thing"] },
          { word: "belgium", categories: ["place"] },
          { word: "bird", categories: ["animals"] },
          { word: "bit", categories: ["thing", "technology"] },
          { word: "book", categories: ["thing", "education"] },
          { word: "boots", categories: ["thing"] },
          { word: "boy", categories: ["people"] },
          { word: "branch", categories: ["thing"] },
          { word: "breakfast", categories: ["thing"] },
          { word: "brother", categories: ["family"] },
          { word: "businessperson", categories: ["people", "business"] },
          { word: "butcher", categories: ["profession"] },
          { word: "byte", categories: ["thing", "technology"] },
          { word: "camera", categories: ["thing"] },
          { word: "candle", categories: ["thing"] },
          { word: "car", categories: ["transportation"] },
          { word: "caravan", categories: ["transportation"] },
          { word: "carpenter", categories: ["profession"] },
          { word: "carpet", categories: ["thing"] },
          { word: "cartoon", categories: ["media"] },
          { word: "cat", categories: ["animals"] },
          { word: "chef", categories: ["profession"] },
          { word: "child", categories: ["people", "family"] },
          { word: "china", categories: ["place"] },
          { word: "church", categories: ["religion"] },
          { word: "city", categories: ["place"] },
          { word: "coat", categories: ["thing"] },
          { word: "coffeeshop", categories: ["place"] },
          { word: "computer", categories: ["thing", "technology"] },
          { word: "continent", categories: ["place"] },
          { word: "controller", categories: ["thing", "technology"] },
          { word: "country", categories: ["place"] },
          { word: "cpu", categories: ["thing", "technology"] },
          { word: "crayon", categories: ["thing"] },
          { word: "cricket", categories: ["animals"] },
          { word: "crowd", categories: ["people"] },
          { word: "daughter", categories: ["family"] },
          { word: "dawn", categories: ["time"] },
          { word: "daybreak", categories: ["time"] },
          { word: "death", categories: ["thing"] },
          { word: "denmark", categories: ["place"] },
          { word: "dentist", categories: ["profession"] },
          { word: "diamond", categories: ["thing"] },
          { word: "dinner", categories: ["food"] },
          { word: "disease", categories: ["thing"] },
          { word: "doctor", categories: ["profession"] },
          { word: "dog", categories: ["animals"] },
          { word: "dream", categories: ["thing"] },
          { word: "dress", categories: ["thing"] },
          { word: "dusk", categories: ["time"] },
          { word: "easter", categories: ["religion"] },
          { word: "egg", categories: ["food"] },
          { word: "eggplant", categories: ["food"] },
          { word: "egypt", categories: ["place"] },
          { word: "electrician", categories: ["profession"] },
          { word: "elephant", categories: ["animals"] },
          { word: "energy", categories: ["thing"] },
          { word: "engine", categories: ["transportation"] },
          { word: "engineer", categories: ["profession"] },
          { word: "england", categories: ["place"] },
          { word: "eve", categories: ["time"] },
          { word: "evening", categories: ["time"] },
          { word: "eventide", categories: ["time"] },
          { word: "exabyte", categories: ["thing", "technology"] },
          { word: "eye", categories: ["thing"] },
          { word: "fall", categories: ["time"] },
          { word: "family", categories: ["family"] },
          { word: "farmer", categories: ["profession"] },
          { word: "father", categories: ["people", "family"] },
          { word: "finland", categories: ["place"] },
          { word: "fireman", categories: ["profession"] },
          { word: "fish", categories: ["animals"] },
          { word: "flag", categories: ["thing"] },
          { word: "florist", categories: ["profession"] },
          { word: "flower", categories: ["thing"] },
          { word: "football", categories: ["sports"] },
          { word: "forest", categories: ["place"] },
          { word: "fountain", categories: ["thing"] },
          { word: "france", categories: ["place"] },
          { word: "furniture", categories: ["thing"] },
          { word: "garage", categories: ["place"] },
          { word: "garden", categories: ["food"] },
          { word: "gas", categories: ["transportation"] },
          { word: "ghost", categories: ["thing"] },
          { word: "gigabyte", categories: ["thing", "technology"] },
          { word: "girl", categories: ["people"] },
          { word: "glass", categories: ["thing"] },
          { word: "gold", categories: ["thing"] },
          { word: "gpu", categories: ["thing", "technology"] },
          { word: "grandmother", categories: ["people", "family"] },
          { word: "grass", categories: ["thing"] },
          { word: "greece", categories: ["place"] },
          { word: "guitar", categories: ["thing"] },
          { word: "hair", categories: ["thing"] },
          { word: "hairdresser", categories: ["profession"] },
          { word: "hamburger", categories: ["food"] },
          { word: "helicopter", categories: ["transportation"] },
          { word: "helmet", categories: ["thing"] },
          { word: "holiday", categories: ["thing"] },
          { word: "honey", categories: ["food"] },
          { word: "horse", categories: ["animals"] },
          { word: "hospital", categories: ["place"] },
          { word: "house", categories: ["place"] },
          { word: "hydrogen", categories: ["science"] },
          { word: "ice", categories: ["science"] },
          { word: "insect", categories: ["animals"] },
          { word: "insurance", categories: ["thing"] },
          { word: "intern", categories: ["profession"] },
          { word: "iron", categories: ["science"] },
          { word: "island", categories: ["place"] },
          { word: "jackal", categories: ["animals"] },
          { word: "jelly", categories: ["food"] },
          { word: "jewellery", categories: ["thing"] },
          { word: "jordan", categories: ["place"] },
          { word: "journalist", categories: ["profession"] },
          { word: "joystick", categories: ["thing", "technology"] },
          { word: "judge", categories: ["profession"] },
          { word: "juice", categories: ["food"] },
          { word: "kangaroo", categories: ["animals"] },
          { word: "keyboard", categories: ["thing", "technology"] },
          { word: "kilobyte", categories: ["thing", "technology"] },
          { word: "king", categories: ["people"] },
          { word: "kitchen", categories: ["place"] },
          { word: "kite", categories: ["thing"] },
          { word: "knife", categories: ["thing"] },
          { word: "lamp", categories: ["thing"] },
          { word: "laptop", categories: ["thing", "technology"] },
          { word: "lawyer", categories: ["profession"] },
          { word: "leather", categories: ["thing"] },
          { word: "librarian", categories: ["profession"] },
          { word: "library", categories: ["place"] },
          { word: "lifeguard", categories: ["profession"] },
          { word: "lighter", categories: ["thing"] },
          { word: "lion", categories: ["animals"] },
          { word: "lizard", categories: ["animals"] },
          { word: "lock", categories: ["thing"] },
          { word: "london", categories: ["place"] },
          { word: "lunch", categories: ["food"] },
          { word: "machine", categories: ["science"] },
          { word: "magazine", categories: ["media"] },
          { word: "magician", categories: ["people"] },
          { word: "man", categories: ["people"] },
          { word: "manchester", categories: ["place"] },
          { word: "market", categories: ["place"] },
          { word: "match", categories: ["thing"] },
          { word: "mechanic", categories: ["profession"] },
          { word: "megabyte", categories: ["thing", "technology"] },
          { word: "memory", categories: ["thing", "technology"] },
          { word: "microphone", categories: ["thing"] },
          { word: "midnight", categories: ["time"] },
          { word: "minister", categories: ["people", "religion"] },
          { word: "monitor", categories: ["thing", "technology"] },
          { word: "monkey", categories: ["animals"] },
          { word: "morn", categories: ["time"] },
          { word: "morning", categories: ["time"] },
          { word: "mother", categories: ["people", "family"] },
          { word: "motherboard", categories: ["thing", "technology"] },
          { word: "motorcycle", categories: ["transportation"] },
          { word: "mouse", categories: ["thing", "technology", "animals"] },
          { word: "musician", categories: ["profession"] },
          { word: "nail", categories: ["thing"] },
          { word: "napkin", categories: ["thing"] },
          { word: "needle", categories: ["thing"] },
          { word: "nest", categories: ["thing"] },
          { word: "nigeria", categories: ["place"] },
          { word: "night", categories: ["time"] },
          { word: "nightfall", categories: ["time"] },
          { word: "noon", categories: ["time"] },
          { word: "notebook", categories: ["thing"] },
          { word: "nurse", categories: ["profession"] },
          { word: "ocean", categories: ["place"] },
          { word: "oil", categories: ["thing"] },
          { word: "optician", categories: ["profession"] },
          { word: "orange", categories: ["food"] },
          { word: "oxygen", categories: ["science"] },
          { word: "oyster", categories: ["animals"] },
          { word: "pager", categories: ["thing", "technology"] },
          { word: "painter", categories: ["profession"] },
          { word: "painting", categories: ["media"] },
          { word: "park", categories: ["place"] },
          { word: "parrot", categories: ["animals"] },
          { word: "pencil", categories: ["thing", "education"] },
          { word: "petabyte", categories: ["thing", "technology"] },
          { word: "pharmacist", categories: ["profession"] },
          { word: "photographer", categories: ["profession"] },
          { word: "piano", categories: ["thing"] },
          { word: "pillow", categories: ["thing"] },
          { word: "pilot", categories: ["profession"] },
          { word: "pizza", categories: ["food"] },
          { word: "planet", categories: ["science"] },
          { word: "plastic", categories: ["thing"] },
          { word: "plumber", categories: ["profession"] },
          { word: "policeman", categories: ["profession"] },
          { word: "portugal", categories: ["place"] },
          { word: "postman", categories: ["profession"] },
          { word: "potato", categories: ["food"] },
          { word: "printer", categories: ["thing", "technology"] },
          { word: "processor", categories: ["thing", "technology"] },
          { word: "psychiatrist", categories: ["profession"] },
          { word: "queen", categories: ["people"] },
          { word: "quill", categories: ["thing"] },
          { word: "rain", categories: ["thing"] },
          { word: "rainbow", categories: ["science"] },
          { word: "raincoat", categories: ["thing"] },
          { word: "ram", categories: ["thing", "technology"] },
          { word: "receptionist", categories: ["profession"] },
          { word: "refrigerator", categories: ["food"] },
          { word: "restaurant", categories: ["place"] },
          { word: "river", categories: ["thing"] },
          { word: "rocket", categories: ["science"] },
          { word: "room", categories: ["place"] },
          { word: "rose", categories: ["thing"] },
          { word: "russia", categories: ["place"] },
          { word: "salesclerk", categories: ["people", "business"] },
          { word: "salesmen", categories: ["profession"] },
          { word: "sandwich", categories: ["food"] },
          { word: "school", categories: ["education"] },
          { word: "scientist", categories: ["profession"] },
          { word: "scooter", categories: ["transportation"] },
          { word: "secretary", categories: ["profession"] },
          { word: "shampoo", categories: ["thing"] },
          { word: "shoe", categories: ["thing"] },
          { word: "smartphone", categories: ["thing", "technology"] },
          { word: "soccer", categories: ["sports"] },
          { word: "solstice", categories: ["time"] },
          { word: "spoon", categories: ["thing"] },
          { word: "spring", categories: ["time"] },
          { word: "state", categories: ["place"] },
          { word: "stone", categories: ["thing"] },
          { word: "student", categories: ["people", "education"] },
          { word: "sugar", categories: ["food"] },
          { word: "summer", categories: ["time"] },
          { word: "sundown", categories: ["time"] },
          { word: "sunset", categories: ["time"] },
          { word: "sweden", categories: ["place"] },
          { word: "table", categories: ["thing"] },
          { word: "tailor", categories: ["profession"] },
          { word: "teacher", categories: ["people", "education", "profession"] },
          { word: "teenager", categories: ["people", "family"] },
          { word: "telephone", categories: ["thing"] },
          { word: "television", categories: ["media"] },
          { word: "tent", categories: ["thing"] },
          { word: "terabyte", categories: ["thing", "technology"] },
          { word: "thailand", categories: ["place"] },
          { word: "tiger", categories: ["animals"] },
          { word: "toddler", categories: ["people", "family"] },
          { word: "tomato", categories: ["food"] },
          { word: "toothbrush", categories: ["thing"] },
          { word: "traffic", categories: ["thing"] },
          { word: "train", categories: ["transportation"] },
          { word: "translator", categories: ["profession"] },
          { word: "truck", categories: ["thing", "transportation"] },
          { word: "twilight", categories: ["time"] },
          { word: "uganda", categories: ["place"] },
          { word: "umbrella", categories: ["thing"] },
          { word: "van", categories: ["transportation"] },
          { word: "vase", categories: ["thing"] },
          { word: "vegetable", categories: ["food"] },
          { word: "vr", categories: ["thing", "technology"] },
          { word: "vulture", categories: ["animals"] },
          { word: "waiter", categories: ["profession"] },
          { word: "waitress", categories: ["profession"] },
          { word: "wall", categories: ["thing"] },
          { word: "whale", categories: ["animals"] },
          { word: "window", categories: ["thing"] },
          { word: "winter", categories: ["time"] },
          { word: "wire", categories: ["thing"] },
          { word: "wolf", categories: ["animals"] },
          { word: "woman", categories: ["people"] },
          { word: "xylophone", categories: ["thing"] },
          { word: "yacht", categories: ["transportation"] },
          { word: "yak", categories: ["animals"] },
          { word: "yottabyte", categories: ["thing", "technology"] },
          { word: "zebra", categories: ["animals"] },
          { word: "zettabyte", categories: ["thing", "technology"] },
          { word: "zoo", categories: ["animals"] }
        ],
        adjective: [
          { word: "abandoned", categories: ["condition"] },
          { word: "abiding", categories: ["personality"] },
          { word: "able", categories: ["condition"] },
          { word: "abrasive", categories: ["condition", "personality"] },
          { word: "abnormal", categories: ["condition"] },
          { word: "absurd", categories: ["condition"] },
          { word: "abundant", categories: ["quantity"] },
          { word: "acceptable", categories: ["condition"] },
          { word: "acidic", categories: ["taste"] },
          { word: "acoustic", categories: ["sounds"] },
          { word: "acrid", categories: ["condition"] },
          { word: "adamant", categories: ["personality"] },
          { word: "adorable", categories: ["personality"] },
          { word: "adventurous", categories: ["personality"] },
          { word: "aggressive", categories: ["personality"] },
          { word: "agitated", categories: ["personality"] },
          { word: "agreeable", categories: ["personality"] },
          { word: "alert", categories: ["condition"] },
          { word: "alive", categories: ["condition"] },
          { word: "aloof", categories: ["personality"] },
          { word: "ambitious", categories: ["personality"] },
          { word: "ancient", categories: ["time"] },
          { word: "angry", categories: ["personality"] },
          { word: "annoyed", categories: ["personality"] },
          { word: "antsy", categories: ["personality"] },
          { word: "anxious", categories: ["personality"] },
          { word: "appalling", categories: ["personality"] },
          { word: "appetizing", categories: ["taste"] },
          { word: "apprehensive", categories: ["personality"] },
          { word: "arrogant", categories: ["personality"] },
          { word: "ashamed", categories: ["personality"] },
          { word: "astonishing", categories: ["personality"] },
          { word: "attractive", categories: ["appearance"] },
          { word: "average", categories: ["appearance"] },
          { word: "bad", categories: ["condition"] },
          { word: "bald", categories: ["appearance"] },
          { word: "bashful", categories: ["personality"] },
          { word: "beautiful", categories: ["appearance"] },
          { word: "beefy", categories: ["appearance"] },
          { word: "belligerent", categories: ["personality"] },
          { word: "bent", categories: ["condition"] },
          { word: "better", categories: ["condition"] },
          { word: "best", categories: ["condition"] },
          { word: "better", categories: ["condition"] },
          { word: "bewildered", categories: ["personality"] },
          { word: "big", categories: ["size"] },
          { word: "billions", categories: ["quantity"] },
          { word: "billowy", categories: ["appearance"] },
          { word: "bitter", categories: ["taste"] },
          { word: "black", categories: ["color"] },
          { word: "bland", categories: ["taste"] },
          { word: "blue", categories: ["color"] },
          { word: "blushing", categories: ["appearance"] },
          { word: "bored", categories: ["personality"] },
          { word: "boring", categories: ["personality"] },
          { word: "boundless", categories: ["personality"] },
          { word: "brainy", categories: ["personality"] },
          { word: "brash", categories: ["personality"] },
          { word: "brave", categories: ["personality"] },
          { word: "breezy", categories: ["touch"] },
          { word: "brief", categories: ["time"] },
          { word: "bright", categories: ["appearance"] },
          { word: "broad", categories: ["shapes"] },
          { word: "broken", categories: ["condition"] },
          { word: "brown", categories: ["color"] },
          { word: "bulky", categories: ["appearance"] },
          { word: "bumpy", categories: ["touch"] },
          { word: "burly", categories: ["appearance"] },
          { word: "busy", categories: ["personality"] },
          { word: "cagey", categories: ["personality"] },
          { word: "calm", categories: ["personality"] },
          { word: "callous", categories: ["personality"] },
          { word: "careful", categories: ["condition"] },
          { word: "chilly", categories: ["touch"] },
          { word: "chubby", categories: ["appearance"] },
          { word: "clean", categories: ["appearance"] },
          { word: "clever", categories: ["condition"] },
          { word: "clumsy", categories: ["personality"] },
          { word: "cold", categories: ["touch"] },
          { word: "colossal", categories: ["size"] },
          { word: "cool", categories: ["touch"] },
          { word: "crashing", categories: ["sounds"] },
          { word: "creamy", categories: ["taste"] },
          { word: "crooked", categories: ["shapes"] },
          { word: "cuddly", categories: ["touch"] },
          { word: "curved", categories: ["shapes"] },
          { word: "damaged", categories: ["touch"] },
          { word: "damp", categories: ["touch"] },
          { word: "dazzling", categories: ["appearance"] },
          { word: "dead", categories: ["condition"] },
          { word: "deafening", categories: ["sounds"] },
          { word: "deep", categories: ["shapes"] },
          { word: "defeated", categories: ["personality"] },
          { word: "delicious", categories: ["taste"] },
          { word: "delightful", categories: ["personality"] },
          { word: "dirty", categories: ["touch"] },
          { word: "disgusting", categories: ["taste"] },
          { word: "drab", categories: ["appearance"] },
          { word: "dry", categories: ["touch"] },
          { word: "eager", categories: ["personality"] },
          { word: "early", categories: ["time"] },
          { word: "easy", categories: ["condition"] },
          { word: "echoing", categories: ["sounds"] },
          { word: "elegant", categories: ["appearance"] },
          { word: "embarrassed", categories: ["personality"] },
          { word: "enough", categories: ["quantity"] },
          { word: "faint", categories: ["sounds"] },
          { word: "faithful", categories: ["personality"] },
          { word: "famous", categories: ["condition"] },
          { word: "fancy", categories: ["appearance"] },
          { word: "fast", categories: ["time"] },
          { word: "fat", categories: ["size"] },
          { word: "few", categories: ["quantity"] },
          { word: "fierce", categories: ["personality"] },
          { word: "fit", categories: ["appearance"] },
          { word: "flabby", categories: ["appearance"] },
          { word: "flaky", categories: ["touch"] },
          { word: "flat", categories: ["shapes"] },
          { word: "fluffy", categories: ["touch"] },
          { word: "freezing", categories: ["touch"] },
          { word: "fresh", categories: ["taste"] },
          { word: "full", categories: ["quantity"] },
          { word: "future", categories: ["time"] },
          { word: "gentle", categories: ["personality"] },
          { word: "gifted", categories: ["condition"] },
          { word: "gigantic", categories: ["size"] },
          { word: "glamorous", categories: ["appearance"] },
          { word: "gorgeous", categories: ["appearance"] },
          { word: "gray", categories: ["color"] },
          { word: "greasy", categories: ["touch", "taste"] },
          { word: "great", categories: ["size"] },
          { word: "green", categories: ["color"] },
          { word: "grumpy", categories: ["personality"] },
          { word: "hallowed", categories: ["condition"] },
          { word: "handsome", categories: ["appearance"] },
          { word: "happy", categories: ["personality"] },
          { word: "harsh", categories: ["sounds"] },
          { word: "helpful", categories: ["condition"] },
          { word: "helpless", categories: ["personality"] },
          { word: "high", categories: ["shapes"] },
          { word: "hissing", categories: ["sounds"] },
          { word: "hollow", categories: ["shapes"] },
          { word: "hot", categories: ["touch", "taste"] },
          { word: "howling", categories: ["sounds"] },
          { word: "huge", categories: ["size"] },
          { word: "hundreds", categories: ["quantity"] },
          { word: "icy", categories: ["touch"] },
          { word: "immense", categories: ["size"] },
          { word: "important", categories: ["condition"] },
          { word: "incalculable", categories: ["quantity"] },
          { word: "inexpensive", categories: ["condition"] },
          { word: "itchy", categories: ["personality"] },
          { word: "jealous", categories: ["personality"] },
          { word: "jolly", categories: ["personality"] },
          { word: "juicy", categories: ["taste"] },
          { word: "kind", categories: ["personality"] },
          { word: "large", categories: ["size"] },
          { word: "late", categories: ["time"] },
          { word: "lazy", categories: ["personality"] },
          { word: "lemon", categories: ["color"] },
          { word: "limited", categories: ["quantity"] },
          { word: "little", categories: ["size", "quantity"] },
          { word: "lively", categories: ["personality"] },
          { word: "long", categories: ["time", "appearance"] },
          { word: "loose", categories: ["touch"] },
          { word: "loud", categories: ["sounds"] },
          { word: "low", categories: ["shapes"] },
          { word: "magnificent", categories: ["appearance"] },
          { word: "mammoth", categories: ["size"] },
          { word: "mango", categories: ["color"] },
          { word: "many", categories: ["quantity"] },
          { word: "massive", categories: ["size"] },
          { word: "mealy", categories: ["condition"] },
          { word: "melodic", categories: ["sounds"] },
          { word: "melted", categories: ["touch"] },
          { word: "microscopic", categories: ["size"] },
          { word: "millions", categories: ["quantity"] },
          { word: "miniature", categories: ["size"] },
          { word: "modern", categories: ["time"] },
          { word: "moldy", categories: ["taste"] },
          { word: "most", categories: ["quantity"] },
          { word: "muscular", categories: ["appearance"] },
          { word: "mushy", categories: ["condition"] },
          { word: "mysterious", categories: ["personality"] },
          { word: "narrow", categories: ["shapes"] },
          { word: "nervous", categories: ["personality"] },
          { word: "nice", categories: ["personality"] },
          { word: "noisy", categories: ["sounds"] },
          { word: "numerous", categories: ["quantity"] },
          { word: "nutritious", categories: ["taste"] },
          { word: "nutty", categories: ["taste"] },
          { word: "obedient", categories: ["personality"] },
          { word: "obnoxious", categories: ["personality"] },
          { word: "odd", categories: ["condition"] },
          { word: "old", categories: ["time"] },
          { word: "orange", categories: ["color"] },
          { word: "panicky", categories: ["personality"] },
          { word: "petite", categories: ["size"] },
          { word: "pitiful", categories: ["personality"] },
          { word: "plain", categories: ["appearance"] },
          { word: "plump", categories: ["appearance"] },
          { word: "polite", categories: ["personality"] },
          { word: "poor", categories: ["condition"] },
          { word: "powerful", categories: ["condition"] },
          { word: "prehistoric", categories: ["time"] },
          { word: "prickly", categories: ["touch"] },
          { word: "proud", categories: ["personality"] },
          { word: "puny", categories: ["size"] },
          { word: "purple", categories: ["color"] },
          { word: "purring", categories: ["sounds"] },
          { word: "putrid", categories: ["taste"] },
          { word: "quaint", categories: ["appearance"] },
          { word: "quick", categories: ["time"] },
          { word: "quiet", categories: ["sounds"] },
          { word: "rancid", categories: ["taste"] },
          { word: "rapid", categories: ["time"] },
          { word: "rapping", categories: ["sounds"] },
          { word: "raspy", categories: ["sounds"] },
          { word: "red", categories: ["color"] },
          { word: "refined", categories: ["shapes"] },
          { word: "repulsive", categories: ["personality"] },
          { word: "rhythmic", categories: ["sounds"] },
          { word: "rich", categories: ["condition"] },
          { word: "ripe", categories: ["taste"] },
          { word: "rotten", categories: ["taste"] },
          { word: "rough", categories: ["touch"] },
          { word: "round", categories: ["shapes"] },
          { word: "salmon", categories: ["color"] },
          { word: "salty", categories: ["taste"] },
          { word: "savory", categories: ["taste"] },
          { word: "scarce", categories: ["quantity"] },
          { word: "scary", categories: ["personality"] },
          { word: "scrawny", categories: ["size"] },
          { word: "screeching", categories: ["sounds"] },
          { word: "scruffy", categories: ["appearance"] },
          { word: "shaggy", categories: ["touch"] },
          { word: "shallow", categories: ["shapes"] },
          { word: "shapely", categories: ["appearance"] },
          { word: "sharp", categories: ["touch"] },
          { word: "short", categories: ["size", "appearance", "time"] },
          { word: "shrilling", categories: ["sounds"] },
          { word: "shy", categories: ["condition"] },
          { word: "silly", categories: ["personality"] },
          { word: "skinny", categories: ["appearance", "shapes"] },
          { word: "slimy", categories: ["touch"] },
          { word: "slow", categories: ["time"] },
          { word: "small", categories: ["size"] },
          { word: "some", categories: ["quantity"] },
          { word: "sour", categories: ["taste"] },
          { word: "sparse", categories: ["quantity"] },
          { word: "spicy", categories: ["taste"] },
          { word: "spoiled", categories: ["taste"] },
          { word: "square", categories: ["shapes"] },
          { word: "squeaking", categories: ["sounds"] },
          { word: "stale", categories: ["taste"] },
          { word: "steep", categories: ["shapes"] },
          { word: "sticky", categories: ["touch"] },
          { word: "stocky", categories: ["appearance"] },
          { word: "straight", categories: ["shapes"] },
          { word: "strong", categories: ["touch"] },
          { word: "substantial", categories: ["quantity"] },
          { word: "sweet", categories: ["taste"] },
          { word: "swift", categories: ["time"] },
          { word: "tall", categories: ["size"] },
          { word: "tangy", categories: ["taste"] },
          { word: "tart", categories: ["taste"] },
          { word: "tasteless", categories: ["taste"] },
          { word: "tasty", categories: ["taste"] },
          { word: "teeny", categories: ["size"] },
          { word: "tender", categories: ["condition"] },
          { word: "thankful", categories: ["personality"] },
          { word: "thoughtless", categories: ["personality"] },
          { word: "thousands", categories: ["quantity"] },
          { word: "thundering", categories: ["sounds"] },
          { word: "tight", categories: ["touch"] },
          { word: "tinkling", categories: ["sounds"] },
          { word: "tiny", categories: ["size"] },
          { word: "ugly", categories: ["appearance"] },
          { word: "uneven", categories: ["touch"] },
          { word: "unimportant", categories: ["condition"] },
          { word: "uninterested", categories: ["condition"] },
          { word: "unkempt", categories: ["appearance"] },
          { word: "unsightly", categories: ["appearance"] },
          { word: "uptight", categories: ["personality"] },
          { word: "vast", categories: ["condition"] },
          { word: "victorious", categories: ["personality"] },
          { word: "wailing", categories: ["sounds"] },
          { word: "warm", categories: ["touch"] },
          { word: "weak", categories: ["touch"] },
          { word: "wet", categories: ["touch"] },
          { word: "whining", categories: ["sounds"] },
          { word: "whispering", categories: ["sounds"] },
          { word: "white", categories: ["color"] },
          { word: "wide", categories: ["shapes"] },
          { word: "witty", categories: ["personality"] },
          { word: "wonderful", categories: ["personality"] },
          { word: "wooden", categories: ["touch"] },
          { word: "worried", categories: ["personality"] },
          { word: "wrong", categories: ["condition"] },
          { word: "yellow", categories: ["color"] },
          { word: "young", categories: ["time"] },
          { word: "yummy", categories: ["taste"] },
          { word: "zealous", categories: ["personality"] }
        ]
      };
      function getWordsByCategory(partOfSpeech, categories) {
        var e_1, _a;
        if (categories === void 0) {
          categories = [];
        }
        var selectedCategoried = new Set(categories);
        var selectedWords = [];
        try {
          for (var _b = __values(exports.wordList[partOfSpeech]), _c = _b.next(); !_c.done; _c = _b.next()) {
            var word = _c.value;
            if (categories.length === 0 || word.categories.some(function(cat) {
              return selectedCategoried.has(cat);
            })) {
              selectedWords.push(word.word);
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return selectedWords;
      }
      exports.getWordsByCategory = getWordsByCategory;
    }
  });

  // node_modules/random-word-slugs/dist/index.js
  var require_dist = __commonJS({
    "node_modules/random-word-slugs/dist/index.js"(exports) {
      "use strict";
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.totalUniqueSlugs = exports.generateSlug = void 0;
      var words_1 = require_words();
      var DEFAULT_NUMBER_OF_WORDS = 3;
      function generateSlug2(numberOfWords, options) {
        var numWords = numberOfWords || DEFAULT_NUMBER_OF_WORDS;
        var defaultOptions = {
          partsOfSpeech: getDefaultPartsOfSpeech(numWords),
          categories: {},
          format: "kebab"
        };
        var opts = __assign(__assign({}, defaultOptions), options);
        var words = [];
        for (var i = 0; i < numWords; i++) {
          var partOfSpeech = opts.partsOfSpeech[i];
          var candidates = words_1.getWordsByCategory(opts.partsOfSpeech[i], opts.categories[partOfSpeech]);
          var rand = candidates[Math.floor(Math.random() * candidates.length)];
          words.push(rand);
        }
        return formatter(words, opts.format);
      }
      exports.generateSlug = generateSlug2;
      function getDefaultPartsOfSpeech(length) {
        var partsOfSpeech = [];
        for (var i = 0; i < length - 1; i++) {
          partsOfSpeech.push("adjective");
        }
        partsOfSpeech.push("noun");
        return partsOfSpeech;
      }
      function formatter(arr, format) {
        if (format === "kebab") {
          return arr.join("-").toLowerCase();
        }
        if (format === "camel") {
          return arr.map(function(el, i) {
            if (i === 0)
              return el.toLowerCase();
            return el[0].toUpperCase() + el.slice(1).toLowerCase();
          }).join("");
        }
        if (format === "lower") {
          return arr.join(" ").toLowerCase();
        }
        if (format === "sentence") {
          return arr.map(function(el, i) {
            if (i === 0) {
              return el[0].toUpperCase() + el.slice(1).toLowerCase();
            }
            return el;
          }).join(" ");
        }
        return arr.map(function(el) {
          return el[0].toUpperCase() + el.slice(1).toLowerCase();
        }).join(" ");
      }
      function totalUniqueSlugs(numberOfWords, options) {
        var _a, _b;
        var numAdjectives = words_1.getWordsByCategory("adjective", (_a = options === null || options === void 0 ? void 0 : options.categories) === null || _a === void 0 ? void 0 : _a.adjective).length;
        var numNouns = words_1.getWordsByCategory("noun", (_b = options === null || options === void 0 ? void 0 : options.categories) === null || _b === void 0 ? void 0 : _b.noun).length;
        var nums = {
          adjective: numAdjectives,
          noun: numNouns
        };
        var numWords = numberOfWords || DEFAULT_NUMBER_OF_WORDS;
        var partsOfSpeech = (options === null || options === void 0 ? void 0 : options.partsOfSpeech) || getDefaultPartsOfSpeech(numWords);
        var combos = 1;
        for (var i = 0; i < numWords; i++) {
          combos *= nums[partsOfSpeech[i]];
        }
        return combos;
      }
      exports.totalUniqueSlugs = totalUniqueSlugs;
    }
  });

  // app/src/pass-enhance.js
  var import_sha256 = __toESM(require_sha256());
  var import_random_word_slugs = __toESM(require_dist());
  var passphraseStorage = browser.storage.sync.get("passphrase");
  var passLengthStorage = browser.storage.sync.get("passLength");
  var passphrase;
  var passLength;
  passphraseStorage.then((res) => {
    if (res && res.passphrase) {
      passphrase = res.passphrase;
    } else {
      const newPassphrase = (0, import_random_word_slugs.generateSlug)();
      browser.storage.sync.set({ passphrase: newPassphrase });
      passphrase = newPassphrase;
    }
  });
  passLengthStorage.then((res) => {
    if (res && res.passLength) {
      passLength = parseInt(res.passLength);
    } else {
      const newPassLength = 12;
      browser.storage.sync.set({ passLength: newPassLength });
      passLength = newPassLength;
    }
  });
  var SPECIAL_CHARS = ["!", "@", "#", "$", "%", "&", "*"];
  var CHARS = "abcdefghijklmnopqrstuvwxyz";
  var urlParts = location.hostname.split(".");
  urlParts.shift();
  var url = urlParts.join(".");
  var inputs = document.querySelectorAll('input[type="password"]');
  var shuffle = (a, ciphertext) => {
    for (let i = a.length - 1; i > 0; i--) {
      const j = ciphertext.charCodeAt(i) % passLength;
      [a[i], a[j]] = [a[j], a[i]];
    }
    return a;
  };
  var encryptInput = (input) => {
    const ciphertext = (0, import_sha256.default)(`${input.value}_${passphrase}_${url}`).toString();
    let passwordArray = [];
    let password = "";
    let i = 0;
    while (passwordArray.length < passLength) {
      const randomDigit = ciphertext.charCodeAt(i) % 10;
      i++;
      const charIndex = ciphertext.charCodeAt(i) % CHARS.length;
      i++;
      const specialCharIndex = ciphertext.charCodeAt(i) % SPECIAL_CHARS.length;
      i++;
      const charUpperIndex = ciphertext.charCodeAt(i) % CHARS.length;
      i++;
      passwordArray.push(randomDigit);
      passwordArray.push(CHARS[charIndex]);
      passwordArray.push(SPECIAL_CHARS[specialCharIndex]);
      passwordArray.push(CHARS[charUpperIndex].toUpperCase());
    }
    password = shuffle(passwordArray.slice(0, passLength), ciphertext).join("");
    input.value = password;
  };
  var mouseIsOnIcon = (e) => {
    const positionInfo = e.target.getBoundingClientRect();
    const mouseX = e.pageX - e.target.offsetLeft;
    const mouseY = e.pageY - e.target.offsetTop;
    const iconTop = positionInfo.height / 2 - 10;
    const iconBottom = positionInfo.height / 2 + 10;
    const iconLeft = positionInfo.width * 0.95 - 12;
    const iconRight = positionInfo.width * 0.95 + 4;
    return mouseX >= iconLeft && mouseX <= iconRight && mouseY >= iconTop && mouseY <= iconBottom;
  };
  var trackInputMousePos = (e) => {
    if (mouseIsOnIcon(e)) {
      e.target.classList.add("pass-enhance-hover");
    } else {
      e.target.classList.remove("pass-enhance-hover");
    }
  };
  var onInputMouseClick = (e) => {
    if (mouseIsOnIcon(e)) {
      e.preventDefault();
      encryptInput(e.target);
    }
  };
  for (let i of inputs) {
    i.classList.add("pass-enhance");
    i.addEventListener("mousemove", trackInputMousePos);
    i.addEventListener("click", onInputMouseClick);
  }
})();
